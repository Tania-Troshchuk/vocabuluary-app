{"version":3,"sources":["features/historyReducer.ts","features/vocabularyReducer.ts","app/store.ts","components/Navbar/NavBarLink.tsx","components/Navbar/Navbar.tsx","app/hooks.ts","pages/AddWordPage/AddWordPage.tsx","pages/NotFoundPage/NotFoundPage.tsx","features/testHelper.ts","components/Result/Result.tsx","components/Test/Test.tsx","pages/TestPage/TestPage.tsx","features/getID.tsx","components/HistoryTestTable/HistoryTestTable.tsx","pages/TestsHistoryPage/TestsHistoryPage.tsx","pages/VocabularyPage/VocabularyPage.tsx","App.tsx","index.tsx"],"names":["savedHistory","localStorage","getItem","initialState","JSON","parse","historySlice","createSlice","name","reducers","add","testsHistory","action","push","payload","setItem","stringify","actions","savedVocabulary","vocabularySlice","vocabulary","newPair","word","translation","changeTranslation","forEach","obj","remove","newVocabulary","filter","store","configureStore","reducer","vocabularyReducer","history","historyReducer","NavBarLink","to","title","end","className","isActive","classNames","Navbar","map","link","useAppSelector","useDispatch","useSelector","AddWordPage","useState","setWord","setTranslation","wasAddWord","setWasAddWord","isContained","setIsContained","state","dispatch","onSubmit","event","preventDefault","object","containedWord","find","includes","setTimeout","htmlFor","type","id","value","placeholder","onChange","target","required","NotFoundPage","getRandomNumber","number","Math","floor","random","getWordsForTest","arr","length","quantity","indexes","index","getWordIndexes","options","objIndex","join","getOptions","sort","Result","result","Test","copyVocabulary","currentTestIndex","setCurrentTestIndex","setResult","lastTest","setLastTest","wordsForTest","useMemo","testForHistory","handleTestClick","currentObj","choosedTranslation","test","nextIndex","testObj","prevResult","histotyAactions","optionTranslation","onClick","TestPage","getID","HistoryTestTable","reduce","score","TestsHistoryPage","VocabularyPage","App","path","element","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61ac53ff.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { HistoryObj } from '../types/HistoryObj';\n\nconst savedHistory = localStorage.getItem('tests-history');\nconst initialState: HistoryObj[][] = savedHistory !== null ? JSON.parse(savedHistory) : [];\n\nconst historySlice = createSlice({\n  name: 'tests-history',\n  initialState,\n  reducers: {\n    add: (testsHistory, action: PayloadAction<HistoryObj[]>) => {\n      testsHistory.push(action.payload);\n      localStorage.setItem('tests-history', JSON.stringify(testsHistory));\n\n      return testsHistory;\n    },\n  },\n});\n\nexport default historySlice.reducer;\nexport const { actions } = historySlice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { VocabularyObj } from '../types/VocabularyObj';\n\nconst savedVocabulary = localStorage.getItem('vocabulary');\nconst initialState: VocabularyObj[] = savedVocabulary !== null ? JSON.parse(savedVocabulary) : [];\n\nconst vocabularySlice = createSlice({\n  name: 'words',\n  initialState,\n  reducers: {\n    add: (vocabulary, action: PayloadAction<VocabularyObj>) => {\n      const newPair: VocabularyObj = {\n        word: action.payload.word,\n        translation: action.payload.translation,\n      };\n\n      let changeTranslation = false;\n\n      vocabulary.forEach((obj: VocabularyObj) => {\n        if (obj.word === action.payload.word) {\n          obj.translation.push(...action.payload.translation);\n\n          changeTranslation = true;\n        }\n      });\n\n      if (!changeTranslation) {\n        vocabulary.push(newPair);\n      }\n\n      localStorage.setItem('vocabulary', JSON.stringify(vocabulary));\n\n      return vocabulary;\n    },\n\n    remove: (vocabulary, action: PayloadAction<string>) => {\n      const newVocabulary = vocabulary.filter(obj => obj.word !== action.payload);\n\n      localStorage.setItem('vocabulary', JSON.stringify(newVocabulary));\n\n      return newVocabulary;\n    },\n  },\n});\n\nexport default vocabularySlice.reducer;\nexport const { actions } = vocabularySlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport historyReducer from '../features/historyReducer';\nimport vocabularyReducer from '../features/vocabularyReducer';\n\nconst store = configureStore({\n  reducer: {\n    vocabulary: vocabularyReducer,\n    history: historyReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  title: string,\n};\n\nexport const NavBarLink: React.FC<Props> = ({ to, title }) => {\n  return (\n    <NavLink\n      to={to}\n      end\n      className={({ isActive }) => classNames(\n        'navigation__link',\n        { 'navigation__link--active': isActive },\n      )}\n    >\n      {title}\n    </NavLink>\n  );\n};\n","import React from 'react';\nimport { Link } from '../../types/LinkObj';\nimport { NavBarLink } from './NavBarLink';\nimport './Navbar.scss';\n\nexport const Navbar = () => {\n  const links: Link[] = [\n    { to: '/', title: 'Словник' },\n    { to: '/add-word', title: 'Додати слово' },\n    { to: '/test', title: 'Перевірка' },\n    { to: '/tests-history', title: 'Історія перевірок' },\n  ];\n\n  return (\n    <nav className=\"navigation\">\n      <ul className=\"navigation__list\">\n        {links.map(link => (\n          <li key={link.title} className=\"navigation__item\">\n            <NavBarLink to={link.to} title={link.title} />\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/vocabularyReducer';\nimport { VocabularyObj } from '../../types/VocabularyObj';\nimport './AddWordPage.scss';\n\nexport const AddWordPage = () => {\n  const [word, setWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [wasAddWord, setWasAddWord] = useState(false);\n  const [isContained, setIsContained] = useState(false);\n\n  const vocabulary = useAppSelector(state => state.vocabulary);\n\n  const dispatch = useDispatch();\n  const add = (object: VocabularyObj) => dispatch(actions.add(object));\n\n  const handleWord = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setWord(event.target.value);\n  };\n\n  const handleTranslation = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTranslation(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const containedWord = vocabulary.find(obj => obj.word === word);\n\n    if (containedWord && containedWord.translation.includes(translation)) {\n      setIsContained(true);\n    } else {\n      add({\n        word,\n        translation: [translation],\n      });\n\n      setWord('');\n      setTranslation('');\n      setWasAddWord(true);\n      setIsContained(false);\n\n      setTimeout(() => {\n        setWasAddWord(false);\n      }, 500);\n    }\n  };\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Додати нове слово\n        </h2>\n\n        <div className=\"page__content add-word\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"add-word__form\"\n          >\n            <label\n              htmlFor=\"field-en\"\n              className=\"add-word__field-title\"\n            >\n              Нове слово:\n              <input\n                type=\"text\"\n                name=\"English word\"\n                id=\"field-en\"\n                className=\"add-word__field\"\n                value={word}\n                placeholder=\"надрукуй слово\"\n                onChange={handleWord}\n                required\n              />\n            </label>\n\n            <label\n              htmlFor=\"field-ua\"\n              className=\"add-word__field-title\"\n            >\n              Переклад:\n              <input\n                type=\"text\"\n                name=\"Translation\"\n                id=\"field-ua\"\n                className=\"add-word__field\"\n                value={translation}\n                placeholder=\"надрукуй переклад\"\n                onChange={handleTranslation}\n                required\n              />\n            </label>\n\n            <button\n              type=\"submit\"\n              className=\"add-word__button\"\n            >\n              Додати\n            </button>\n          </form>\n\n          {wasAddWord && (\n            <div className=\"add-word__message add-word__message--success\">\n              Слово успішно додано\n            </div>\n          )}\n\n          {isContained && (\n            <div className=\"add-word__message add-word__message--warning\">\n              Слово з таким перекладом вже міститься у словнику\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage = () => (\n  <h2 className=\"page__title\">Page not found</h2>\n);\n","import { VocabularyObj } from '../types/VocabularyObj';\n\nconst getRandomNumber = (number: number) => {\n  return Math.floor(Math.random() * number);\n};\n\nconst getWordIndexes = (number: number, arr: VocabularyObj[]) => {\n  const indexes: number[] = [];\n\n  while (indexes.length < number) {\n    const index = getRandomNumber(arr.length);\n\n    if (!indexes.includes(index)) {\n      indexes.push(index);\n    }\n  }\n\n  return indexes;\n};\n\nconst getOptions = (objIndex: number, arr: VocabularyObj[], quantity: number) => {\n  const correctTranslation = arr[objIndex].translation.join(', ');\n  const options: string[] = [correctTranslation];\n\n  while (options.length < quantity) {\n    const index = getRandomNumber(arr.length);\n    const word = arr[index].translation.join(', ');\n\n    if (index !== objIndex && !options.includes(word)) {\n      options.push(word);\n    }\n  }\n\n  return options;\n};\n\nexport const getWordsForTest = (arr: VocabularyObj[], length:number, quantity: number) => {\n  const wordIndexes = getWordIndexes(length, arr);\n\n  const arrOfWords = wordIndexes.map((index) => {\n    const obj = arr[index];\n    const options = getOptions(index, arr, quantity);\n\n    const preparedObj = {\n      ...obj,\n      options: [...options].sort(() => 0.5 - Math.random()),\n    };\n\n    return preparedObj;\n  });\n\n  return arrOfWords;\n};\n","import React from 'react';\n\ntype Props = {\n  result: number,\n};\n\nexport const Result: React.FC<Props> = ({ result }) => (\n  <div className=\"test__result\">\n    {result === 10 ? (\n      <div className=\"test__result test__result--excellent\">\n        <div>&#127881;&#127881;&#127881;</div>\n        {`Вітаємо ${result * 10}% правильних відповідей`}\n      </div>\n    ) : (\n      `Правильних відповідей: ${result * 10}%`\n    )}\n  </div>\n);\n","import React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getWordsForTest } from '../../features/testHelper';\nimport { actions as histotyAactions } from '../../features/historyReducer';\nimport { HistoryObj } from '../../types/HistoryObj';\nimport { VocabularyObj } from '../../types/VocabularyObj';\nimport { Result } from '../Result/Result';\n\ntype Props = {\n  vocabulary: VocabularyObj[],\n};\n\nexport const Test: React.FC<Props> = ({ vocabulary }) => {\n  const copyVocabulary = [...vocabulary];\n  const testLength = 10;\n  const numberOfOptions = 4;\n\n  const [currentTestIndex, setCurrentTestIndex] = useState(0);\n  const [result, setResult] = useState(0);\n  const [lastTest, setLastTest] = useState(false);\n\n  const wordsForTest = useMemo(\n    () => getWordsForTest(copyVocabulary, testLength, numberOfOptions),\n    [],\n  );\n  const testForHistory: HistoryObj[] = useMemo(() => [], []);\n\n  const dispatch = useDispatch();\n  const add = (test: HistoryObj[]) => dispatch(histotyAactions.add(test));\n\n  const handleTestClick = (currentObj: VocabularyObj, choosedTranslation: string) => {\n    const nextIndex = currentTestIndex + 1;\n    const testObj: HistoryObj = {\n      word: currentObj.word,\n      translation: currentObj.translation,\n      choosedTranslation,\n    };\n\n    testForHistory.push(testObj);\n\n    if (currentObj.translation.join(', ') === choosedTranslation) {\n      setResult(prevResult => prevResult + 1);\n    }\n\n    if (nextIndex < testLength) {\n      setCurrentTestIndex(nextIndex);\n    } else {\n      setLastTest(true);\n      add(testForHistory);\n    }\n  };\n\n  return (\n    <div className=\"page__content test\">\n\n      {!lastTest ? (\n        <>\n          <div className=\"test__word\">\n            <div className=\"test__word-number\">\n              {`Слово: ${currentTestIndex + 1} з ${testLength}`}\n            </div>\n\n            <div className=\"test__word-text\">\n              {wordsForTest[currentTestIndex].word}\n            </div>\n          </div>\n\n          <div className=\"test__translation\">\n            {wordsForTest[currentTestIndex].options.map((optionTranslation) => {\n              return (\n                <button\n                  key={optionTranslation}\n                  type=\"button\"\n                  className=\"test__translation-item\"\n                  onClick={() => handleTestClick(\n                    wordsForTest[currentTestIndex],\n                    optionTranslation,\n                  )}\n                >\n                  {optionTranslation}\n                </button>\n              );\n            })}\n          </div>\n        </>\n      ) : (\n        <Result result={result} />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { Test } from '../../components/Test/Test';\nimport './TestPage.scss';\n\nexport const TestPage = () => {\n  const vocabulary = useSelector((state: RootState) => state.vocabulary);\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Перевірка\n        </h2>\n\n        {vocabulary.length >= 10 ? (\n          <Test vocabulary={vocabulary} />\n        ) : (\n          <div className=\"page__description\">\n            Для проходження тесту в словнику має бути щонайменше 10 слів, натисніть на кнопку&nbsp;\n            <span className=\"page__description page__description--main\">\n              Додати слово\n            </span>\n            &nbsp;ліворуч, щоб додати нові слова\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n","let id = 0;\n\nexport const getID = () => {\n  id += 1;\n\n  return id;\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { getID } from '../../features/getID';\nimport { HistoryObj } from '../../types/HistoryObj';\n\ntype Props = {\n  key: number,\n  number: number,\n  test: HistoryObj[],\n};\n\nexport const HistoryTestTable: React.FC<Props> = ({ test, number }) => {\n  const result = test.reduce((score, obj) => {\n    if (obj.translation.join(', ') === obj.choosedTranslation) {\n      return score + 1;\n    }\n\n    return score;\n  }, 0);\n\n  return (\n    <div className=\"page__content tests-history\">\n      <h3 className=\"tests-history__title\">\n        {`Результат перевірки № ${number + 1}: ${result * 10}%`}\n      </h3>\n\n      <table className=\"tests-history__table\">\n        <thead>\n          <tr className=\"tests-history__item\">\n            <th className=\"tests-history__word tests-history__word--title\">\n              Нове слово\n            </th>\n\n            <th className=\"tests-history__word tests-history__word--title\">\n              Правильний переклад\n            </th>\n\n            <th className=\"tests-history__word tests-history__word--title\">\n              Обраний переклад\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {test.map(({ word, translation, choosedTranslation }) => {\n            return (\n              <tr\n                key={getID()}\n                className={classNames('tests-history__item', {\n                  'tests-history__item--right': translation.join(', ') === choosedTranslation,\n                })}\n              >\n                <td className=\"tests-history__word\">\n                  {word}\n                </td>\n\n                <td className=\"tests-history__word\">\n                  {translation.join(', ')}\n                </td>\n\n                <td className=\"tests-history__word\">\n                  {choosedTranslation}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { HistoryTestTable } from '../../components/HistoryTestTable/HistoryTestTable';\nimport { getID } from '../../features/getID';\nimport './TestsHistoryPage.scss';\n\nexport const TestsHistoryPage = () => {\n  const testsHistory = useAppSelector(state => state.history);\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Історія перевірок\n        </h2>\n\n        {testsHistory.length\n          ? (\n            testsHistory.map((test, index) => (\n              <HistoryTestTable\n                key={getID()}\n                number={index}\n                test={test}\n              />\n            ))\n          ) : (\n            <div className=\"page__description\">\n              Ви ще не перевіряли свої знання, натисніть на кнопку&nbsp;\n              <span className=\"page__description page__description--main\">\n                Перевірка\n              </span>\n              &nbsp;ліворуч, щоб спробувати свої сили\n            </div>\n          )}\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/vocabularyReducer';\nimport './VocabularyPage.scss';\n\nexport const VocabularyPage = () => {\n  const vocabulary = useAppSelector(state => state.vocabulary);\n\n  const dispatch = useDispatch();\n\n  const deleteWord = (value: string) => (\n    dispatch(actions.remove(value))\n  );\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Словник\n        </h2>\n\n        {vocabulary.length\n          ? (\n            <div className=\"page__content vocabulary\">\n              <table className=\"vocabulary__table\">\n                <thead>\n                  <tr className=\"vocabulary__item\">\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      Нове слово\n                    </th>\n\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      Переклад\n                    </th>\n\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      X\n                    </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {vocabulary.map(({ word, translation }) => {\n                    return (\n                      <tr className=\"vocabulary__item\" key={word}>\n                        <td className=\"vocabulary__word\">\n                          {word}\n                        </td>\n\n                        <td className=\"vocabulary__word\">\n                          { translation.length >= 2\n                            ? translation.join(', ')\n                            : translation }\n                        </td>\n\n                        <td className=\"vocabulary__word\">\n                          <button\n                            className=\"vocabulary__button\"\n                            type=\"button\"\n                            onClick={() => deleteWord(word)}\n                          >\n                            X\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )\n          : (\n            <div className=\"page__description\">\n              Словник поки що пустий, натисніть на кнопку&nbsp;\n              <span className=\"page__description page__description--main\">\n                Додати слово\n              </span>\n              &nbsp;ліворуч, щоб почати наповнювати його\n            </div>\n          )}\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { AddWordPage } from './pages/AddWordPage/AddWordPage';\nimport { NotFoundPage } from './pages/NotFoundPage/NotFoundPage';\nimport { TestPage } from './pages/TestPage/TestPage';\nimport { TestsHistoryPage } from './pages/TestsHistoryPage/TestsHistoryPage';\nimport { VocabularyPage } from './pages/VocabularyPage/VocabularyPage';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Navbar />\n\n      <main>\n        <Routes>\n          <Route path=\"/\" element={<VocabularyPage />} />\n          <Route path=\"/add-word\" element={<AddWordPage />} />\n          <Route path=\"/test\" element={<TestPage />} />\n          <Route path=\"/tests-history\" element={<TestsHistoryPage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}