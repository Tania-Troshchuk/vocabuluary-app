{"version":3,"sources":["features/historyReducer.ts","features/vocabularyReducer.ts","app/store.ts","components/NavBarLink.tsx","components/Navbar/Navbar.tsx","app/hooks.ts","pages/AddWordPage/AddWordPage.tsx","pages/NotFoundPage/NotFoundPage.tsx","components/Test/Test.tsx","pages/TestPage/TestPage.tsx","features/getID.tsx","components/HistoryTestTable/HistoryTestTable.tsx","pages/TestsHistoryPage/TestsHistoryPage.tsx","pages/VocabularyPage/VocabularyPage.tsx","App.tsx","index.tsx"],"names":["savedHistory","localStorage","getItem","initialState","JSON","parse","historySlice","createSlice","name","reducers","add","testsHistory","action","push","payload","setItem","stringify","actions","savedVocabulary","vocabularySlice","vocabulary","newPair","word","translation","changeTranslation","forEach","obj","remove","newVocabulary","filter","store","configureStore","reducer","vocabularyReducer","history","historyReducer","NavBarLink","to","title","end","className","isActive","classNames","Navbar","useAppSelector","useDispatch","useSelector","AddWordPage","useState","setWord","setTranslation","wasAddWord","setWasAddWord","isContained","setIsContained","state","dispatch","onSubmit","event","preventDefault","object","containedWord","find","includes","setTimeout","htmlFor","type","id","value","placeholder","onChange","target","required","NotFoundPage","Test","copyVocabulary","currentTestIndex","setCurrentTestIndex","result","setResult","lastTest","setLastTest","testForHistory","useMemo","getRandomNumber","number","Math","floor","random","wordsForTest","indexes","length","index","getWordIndexes","map","options","objIndex","join","getOptions","sort","handleTestClick","currentObj","choosedTranslation","test","nextIndex","testObj","prevResult","histotyAactions","optionTranslation","onClick","TestPage","getID","HistoryTestTable","reduce","score","TestsHistoryPage","VocabularyPage","App","path","element","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1750a09.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { HistoryObj } from '../types/HistoryObj';\n\nconst savedHistory = localStorage.getItem('tests-history');\nconst initialState: HistoryObj[][] = savedHistory !== null ? JSON.parse(savedHistory) : [];\n\nconst historySlice = createSlice({\n  name: 'tests-history',\n  initialState,\n  reducers: {\n    add: (testsHistory, action: PayloadAction<HistoryObj[]>) => {\n      testsHistory.push(action.payload);\n      localStorage.setItem('tests-history', JSON.stringify(testsHistory));\n\n      return testsHistory;\n    },\n  },\n});\n\nexport default historySlice.reducer;\nexport const { actions } = historySlice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { VocabularyObj } from '../types/VocabularyObj';\n\nconst savedVocabulary = localStorage.getItem('vocabulary');\nconst initialState: VocabularyObj[] = savedVocabulary !== null ? JSON.parse(savedVocabulary) : [];\n\nconst vocabularySlice = createSlice({\n  name: 'words',\n  initialState,\n  reducers: {\n    add: (vocabulary, action: PayloadAction<VocabularyObj>) => {\n      const newPair: VocabularyObj = {\n        word: action.payload.word,\n        translation: action.payload.translation,\n      };\n\n      let changeTranslation = false;\n\n      vocabulary.forEach((obj: VocabularyObj) => {\n        if (obj.word === action.payload.word) {\n          obj.translation.push(...action.payload.translation);\n\n          changeTranslation = true;\n        }\n      });\n\n      if (!changeTranslation) {\n        vocabulary.push(newPair);\n      }\n\n      localStorage.setItem('vocabulary', JSON.stringify(vocabulary));\n\n      return vocabulary;\n    },\n\n    remove: (vocabulary, action: PayloadAction<string>) => {\n      const newVocabulary = vocabulary.filter(obj => obj.word !== action.payload);\n\n      localStorage.setItem('vocabulary', JSON.stringify(newVocabulary));\n\n      return newVocabulary;\n    },\n  },\n});\n\nexport default vocabularySlice.reducer;\nexport const { actions } = vocabularySlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport historyReducer from '../features/historyReducer';\nimport vocabularyReducer from '../features/vocabularyReducer';\n\nconst store = configureStore({\n  reducer: {\n    vocabulary: vocabularyReducer,\n    history: historyReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  title: string,\n};\n\nexport const NavBarLink: React.FC<Props> = ({ to, title }) => {\n  return (\n    <NavLink\n      to={to}\n      end\n      className={({ isActive }) => classNames(\n        'navigation__link',\n        { 'navigation__link--active': isActive },\n      )}\n    >\n      {title}\n    </NavLink>\n  );\n};\n","import React from 'react';\nimport { NavBarLink } from '../NavBarLink';\nimport './Navbar.scss';\n\nexport const Navbar = () => {\n  return (\n    <nav className=\"navigation\">\n      <ul className=\"navigation__list\">\n        <li className=\"navigation__item\">\n          <NavBarLink to=\"/\" title=\"Словник\" />\n        </li>\n\n        <li className=\"navigation__item\">\n          <NavBarLink to=\"/add-word\" title=\"Додати слово\" />\n        </li>\n\n        <li className=\"navigation__item\">\n          <NavBarLink to=\"/test\" title=\"Перевірка\" />\n        </li>\n\n        <li className=\"navigation__item\">\n          <NavBarLink to=\"/tests-history\" title=\"Історія перевірок\" />\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/vocabularyReducer';\nimport { VocabularyObj } from '../../types/VocabularyObj';\nimport './AddWordPage.scss';\n\nexport const AddWordPage = () => {\n  const [word, setWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [wasAddWord, setWasAddWord] = useState(false);\n  const [isContained, setIsContained] = useState(false);\n\n  const vocabulary = useAppSelector(state => state.vocabulary);\n\n  const dispatch = useDispatch();\n  const add = (object: VocabularyObj) => dispatch(actions.add(object));\n\n  const handleWord = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setWord(event.target.value);\n  };\n\n  const handleTranslation = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTranslation(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const containedWord = vocabulary.find(obj => obj.word === word);\n\n    if (containedWord && containedWord.translation.includes(translation)) {\n      setIsContained(true);\n    } else {\n      add({\n        word,\n        translation: [translation],\n      });\n\n      setWord('');\n      setTranslation('');\n      setWasAddWord(true);\n      setIsContained(false);\n\n      setTimeout(() => {\n        setWasAddWord(false);\n      }, 500);\n    }\n  };\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Додати нове слово\n        </h2>\n\n        <div className=\"page__content add-word\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"add-word__form\"\n          >\n            <label\n              htmlFor=\"field-en\"\n              className=\"add-word__field-title\"\n            >\n              Нове слово:\n              <input\n                type=\"text\"\n                name=\"English word\"\n                id=\"field-en\"\n                className=\"add-word__field\"\n                value={word}\n                placeholder=\"надрукуй слово\"\n                onChange={handleWord}\n                required\n              />\n            </label>\n\n            <label\n              htmlFor=\"field-ua\"\n              className=\"add-word__field-title\"\n            >\n              Переклад:\n              <input\n                type=\"text\"\n                name=\"Translation\"\n                id=\"field-ua\"\n                className=\"add-word__field\"\n                value={translation}\n                placeholder=\"надрукуй переклад\"\n                onChange={handleTranslation}\n                required\n              />\n            </label>\n\n            <button\n              type=\"submit\"\n              className=\"add-word__button\"\n            >\n              Додати\n            </button>\n          </form>\n\n          {wasAddWord && (\n            <div className=\"add-word__message add-word__message--success\">\n              Слово успішно додано\n            </div>\n          )}\n\n          {isContained && (\n            <div className=\"add-word__message add-word__message--warning\">\n              Слово з таким перекладом вже міститься у словнику\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage = () => (\n  <h2 className=\"page__title\">Page not found</h2>\n);\n","import React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as histotyAactions } from '../../features/historyReducer';\nimport { HistoryObj } from '../../types/HistoryObj';\nimport { VocabularyObj } from '../../types/VocabularyObj';\n\ntype Props = {\n  vocabulary: VocabularyObj[],\n};\n\nexport const Test: React.FC<Props> = ({ vocabulary }) => {\n  const copyVocabulary = [...vocabulary];\n  const testLength = 10;\n  const numberOfOptions = 4;\n\n  const [currentTestIndex, setCurrentTestIndex] = useState(0);\n  const [result, setResult] = useState(0);\n  const [lastTest, setLastTest] = useState(false);\n\n  const testForHistory: HistoryObj[] = useMemo(() => [], []);\n\n  const dispatch = useDispatch();\n  const add = (test: HistoryObj[]) => dispatch(histotyAactions.add(test));\n\n  const getRandomNumber = (number: number) => {\n    return Math.floor(Math.random() * number);\n  };\n\n  const getWordIndexes = (number: number) => {\n    const indexes: number[] = [];\n\n    while (indexes.length < number) {\n      const index = getRandomNumber(copyVocabulary.length);\n\n      if (!indexes.includes(index)) {\n        indexes.push(index);\n      }\n    }\n\n    return indexes;\n  };\n\n  const getOptions = (objIndex: number) => {\n    const correctTranslation = copyVocabulary[objIndex].translation.join(', ');\n    const options: string[] = [correctTranslation];\n\n    while (options.length < numberOfOptions) {\n      const index = getRandomNumber(copyVocabulary.length);\n      const word = copyVocabulary[index].translation.join(', ');\n\n      if (index !== objIndex && !options.includes(word)) {\n        options.push(word);\n      }\n    }\n\n    return options;\n  };\n\n  const getWordsForTest = () => {\n    const wordIndexes = getWordIndexes(testLength);\n\n    const arrOfWords = wordIndexes.map((index) => {\n      const obj = copyVocabulary[index];\n      const options = getOptions(index);\n\n      const preparedObj = {\n        ...obj,\n        options: [...options].sort(() => 0.5 - Math.random()),\n      };\n\n      return preparedObj;\n    });\n\n    return arrOfWords;\n  };\n\n  const wordsForTest = useMemo(getWordsForTest, []);\n\n  const handleTestClick = (currentObj: VocabularyObj, choosedTranslation: string) => {\n    const nextIndex = currentTestIndex + 1;\n    const testObj: HistoryObj = {\n      word: currentObj.word,\n      translation: currentObj.translation,\n      choosedTranslation,\n    };\n\n    testForHistory.push(testObj);\n\n    if (currentObj.translation.join(', ') === choosedTranslation) {\n      setResult(prevResult => prevResult + 1);\n    }\n\n    if (nextIndex < testLength) {\n      setCurrentTestIndex(nextIndex);\n    } else {\n      setLastTest(true);\n      add(testForHistory);\n    }\n  };\n\n  return (\n    <div className=\"page__content test\">\n\n      {!lastTest ? (\n        <>\n          <div className=\"test__word\">\n            <div className=\"test__word-number\">\n              {`Слово: ${currentTestIndex + 1} з ${testLength}`}\n            </div>\n\n            <div className=\"test__word-text\">\n              {wordsForTest[currentTestIndex].word}\n            </div>\n          </div>\n\n          <div className=\"test__translation\">\n            {wordsForTest[currentTestIndex].options.map((optionTranslation) => {\n              return (\n                <button\n                  key={optionTranslation}\n                  type=\"button\"\n                  className=\"test__translation-item\"\n                  onClick={() => handleTestClick(\n                    wordsForTest[currentTestIndex],\n                    optionTranslation,\n                  )}\n                >\n                  {optionTranslation}\n                </button>\n              );\n            })}\n          </div>\n        </>\n      ) : (\n        <div className=\"test__result\">\n          {result === 10 ? (\n            <div className=\"test__result test__result--excellent\">\n              <div>&#127881;&#127881;&#127881;</div>\n              {`Вітаємо ${result * 10}% правильних відповідей`}\n            </div>\n          ) : (\n            `Правильних відповідей: ${result * 10}%`\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { Test } from '../../components/Test/Test';\nimport './TestPage.scss';\n\nexport const TestPage = () => {\n  const vocabulary = useSelector((state: RootState) => state.vocabulary);\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Перевірка\n        </h2>\n\n        {vocabulary.length >= 10 ? (\n          <Test vocabulary={vocabulary} />\n        ) : (\n          <div className=\"page__description\">\n            Для проходження тесту в словнику має бути щонайменше 10 слів, натисніть на кнопку&nbsp;\n            <span className=\"page__description page__description--main\">\n              Додати слово\n            </span>\n            &nbsp;ліворуч, щоб додати нові слова\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n","let id = 0;\n\nexport const getID = () => {\n  id += 1;\n\n  return id;\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { getID } from '../../features/getID';\nimport { HistoryObj } from '../../types/HistoryObj';\n\ntype Props = {\n  key: number,\n  number: number,\n  test: HistoryObj[],\n};\n\nexport const HistoryTestTable: React.FC<Props> = ({ test, number }) => {\n  const result = test.reduce((score, obj) => {\n    if (obj.translation.join(', ') === obj.choosedTranslation) {\n      return score + 1;\n    }\n\n    return score;\n  }, 0);\n\n  return (\n    <div className=\"page__content tests-history\">\n      <h3 className=\"tests-history__title\">\n        {`Результат перевірки № ${number + 1}: ${result * 10}%`}\n      </h3>\n\n      <table className=\"tests-history__table\">\n        <thead>\n          <tr className=\"tests-history__item\">\n            <th className=\"tests-history__word tests-history__word--title\">\n              Нове слово\n            </th>\n\n            <th className=\"tests-history__word tests-history__word--title\">\n              Правильний переклад\n            </th>\n\n            <th className=\"tests-history__word tests-history__word--title\">\n              Обраний переклад\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {test.map(({ word, translation, choosedTranslation }) => {\n            return (\n              <tr\n                key={getID()}\n                className={classNames('tests-history__item', {\n                  'tests-history__item--right': translation.join(', ') === choosedTranslation,\n                })}\n              >\n                <td className=\"tests-history__word\">\n                  {word}\n                </td>\n\n                <td className=\"tests-history__word\">\n                  {translation.join(', ')}\n                </td>\n\n                <td className=\"tests-history__word\">\n                  {choosedTranslation}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { HistoryTestTable } from '../../components/HistoryTestTable/HistoryTestTable';\nimport { getID } from '../../features/getID';\nimport './TestsHistoryPage.scss';\n\nexport const TestsHistoryPage = () => {\n  const testsHistory = useAppSelector(state => state.history);\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Історія перевірок\n        </h2>\n\n        {testsHistory.length\n          ? (\n            testsHistory.map((test, index) => (\n              <HistoryTestTable\n                key={getID()}\n                number={index}\n                test={test}\n              />\n            ))\n          ) : (\n            <div className=\"page__description\">\n              Ви ще не перевіряли свої знання, натисніть на кнопку&nbsp;\n              <span className=\"page__description page__description--main\">\n                Перевірка\n              </span>\n              &nbsp;ліворуч, щоб спробувати свої сили\n            </div>\n          )}\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/vocabularyReducer';\nimport './VocabularyPage.scss';\n\nexport const VocabularyPage = () => {\n  const vocabulary = useAppSelector(state => state.vocabulary);\n\n  const dispatch = useDispatch();\n\n  const deleteWord = (value: string) => (\n    dispatch(actions.remove(value))\n  );\n\n  return (\n    <section className=\"page\">\n      <div className=\"page__section\">\n        <h2 className=\"page__title\">\n          Словник\n        </h2>\n\n        {vocabulary.length\n          ? (\n            <div className=\"page__content vocabulary\">\n              <table className=\"vocabulary__table\">\n                <thead>\n                  <tr className=\"vocabulary__item\">\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      Нове слово\n                    </th>\n\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      Переклад\n                    </th>\n\n                    <th className=\"vocabulary__word vocabulary__word--title\">\n                      X\n                    </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {vocabulary.map(({ word, translation }) => {\n                    return (\n                      <tr className=\"vocabulary__item\" key={word}>\n                        <td className=\"vocabulary__word\">\n                          {word}\n                        </td>\n\n                        <td className=\"vocabulary__word\">\n                          { translation.length >= 2\n                            ? translation.join(', ')\n                            : translation }\n                        </td>\n\n                        <td className=\"vocabulary__word\">\n                          <button\n                            className=\"vocabulary__button\"\n                            type=\"button\"\n                            onClick={() => deleteWord(word)}\n                          >\n                            X\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )\n          : (\n            <div className=\"page__description\">\n              Словник поки що пустий, натисніть на кнопку&nbsp;\n              <span className=\"page__description page__description--main\">\n                Додати слово\n              </span>\n              &nbsp;ліворуч, щоб почати наповнювати його\n            </div>\n          )}\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { AddWordPage } from './pages/AddWordPage/AddWordPage';\nimport { NotFoundPage } from './pages/NotFoundPage/NotFoundPage';\nimport { TestPage } from './pages/TestPage/TestPage';\nimport { TestsHistoryPage } from './pages/TestsHistoryPage/TestsHistoryPage';\nimport { VocabularyPage } from './pages/VocabularyPage/VocabularyPage';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Navbar />\n\n      <main>\n        <Routes>\n          <Route path=\"/\" element={<VocabularyPage />} />\n          <Route path=\"/add-word\" element={<AddWordPage />} />\n          <Route path=\"/test\" element={<TestPage />} />\n          <Route path=\"/tests-history\" element={<TestsHistoryPage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}